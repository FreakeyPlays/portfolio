---
const links = [
  {
    label: '/about',
    url: '#about',
    samePage: true,
  },
  {
    label: '/skills',
    url: '#skills',
    samePage: true,
  },
  {
    label: '/career',
    url: '#career',
    samePage: true,
  },
  {
    label: '/projects',
    url: '#projects',
    samePage: true,
  },
  {
    label: '/blog',
    url: '/blog',
    samePage: false,
  },
];
---

<nav
  aria-label="Primary"
  class="mx-2 h-16 p-2 pr-8 isolate rounded-full overflow-hidden bg-gray-200/20 sticky top-4 backdrop-blur-sm shadow-xl col-[image]! border border-white/20 flex items-center justify-between"
>
  <div
    class="filter-[url(#noise)] absolute inset-0 opacity-20 mix-blend-soft-light pointer-events-none"
  >
  </div>
  <a class="bg-gradient-to-tr z-10 from-lime-400 to-green-600 w-12 h-12 rounded-full" href="/"></a>
  <ul class="flex gap-4 z-10">
    {
      links.map((el) => (
        <li class="has-[.active-nav-link]:bg-gradient-to-br has-[.active-nav-link]:from-lime-400 has-[.active-nav-link]:to-green-600 has-[.active-nav-link]:text-transparent has-[.active-nav-link]:bg-clip-text">
          <a
            href={el.url}
            data-home-link={el.samePage}
            class="text-lg font-bold inline-block transition-transform hover:text-neutral-300 active:translate-y-0.5"
          >
            {el.label}
          </a>
        </li>
      ))
    }
  </ul>
</nav>

<script>
  const navLinks: NodeListOf<HTMLAnchorElement> =
    document.querySelectorAll('[data-home-link="true"]');
  const sectionMap: Map<HTMLElement, HTMLAnchorElement> = new Map();

  navLinks.forEach((link) => {
    const href = link.getAttribute('href');
    if (!href || !href.startsWith('#')) return;

    const id = href.slice(1);
    const section = document.getElementById(id);
    if (section) {
      sectionMap.set(section, link);
    }
  });

  if (sectionMap.size > 0) {
    let currentActive: HTMLAnchorElement | null = null;

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const newActive = sectionMap.get(entry.target as HTMLElement);
            if (newActive && newActive !== currentActive) {
              if (currentActive) currentActive.classList.remove('active-nav-link');
              newActive.classList.add('active-nav-link');
              currentActive = newActive;
            }
          }
        });
      },
      {
        threshold: 0.6,
        rootMargin: '0px 0px -20% 0px',
      }
    );

    sectionMap.forEach((_, section) => observer.observe(section));
  }
</script>
